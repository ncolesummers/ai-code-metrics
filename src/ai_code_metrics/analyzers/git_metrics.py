"""Git repository metrics analysis for AI coding metrics."""

import re
from datetime import datetime, timedelta
from typing import Any

import git


class GitMetricsAnalyzer:
    """Analyzes git repositories for AI-related metrics."""
    
    def __init__(self, repo_path: str):
        self.repo = git.Repo(repo_path)
        # Patterns to identify AI-generated code
        self.ai_patterns = [
            r'# AI-generated',
            r'# Generated by AI',
            r'// AI-assisted',
            r'"""AI-generated"""',
            r'ðŸ¤– Generated with',  # Claude Code signature
        ]
        
    def analyze_recent_commits(self, days: int = 7) -> list[dict[str, Any]]:
        """Analyze commits from the last N days."""
        since = datetime.now() - timedelta(days=days)
        metrics = []
        
        for commit in self.repo.iter_commits(since=since):
            commit_metrics = self._analyze_commit(commit)
            metrics.append(commit_metrics)
            
        return metrics
    
    def _analyze_commit(self, commit) -> dict[str, Any]:
        """Analyze a single commit for metrics."""
        stats = commit.stats.total
        ai_lines = 0
        
        # Check for AI patterns in diff
        if len(commit.parents) > 0:
            for item in commit.diff(commit.parents[0]):
                if not item.a_blob or not item.b_blob:
                    continue
                    
                try:
                    diff_text = item.diff.decode('utf-8', errors='ignore')
                    for line in diff_text.split('\n'):
                        if line.startswith('+') and any(re.search(pattern, line) for pattern in self.ai_patterns):
                            ai_lines += 1
                except Exception:
                    pass
        
        return {
            'commit_hash': commit.hexsha,
            'timestamp': commit.committed_datetime.isoformat(),
            'author': commit.author.name,
            'lines_added': stats.get('insertions', 0),
            'lines_deleted': stats.get('deletions', 0),
            'files_changed': stats.get('files', 0),
            'ai_generated_lines': ai_lines,
            'commit_message_quality': self._score_commit_message(commit.message)
        }
    
    def _score_commit_message(self, message: str) -> float:
        """Score commit message quality (0-100)."""
        score = 100.0
        
        # Check conventional commit format
        if not re.match(r'^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+', message):
            score -= 20
        
        # Check length
        if len(message) < 10:
            score -= 30
        elif len(message) > 72:
            score -= 10
            
        # Check for issue references
        if not re.search(r'#\d+', message):
            score -= 10
            
        return max(0, score)